# Generated by Django 4.1.10 on 2024-04-17 07:31

from django.db import migrations


def content_type_is_used(apps, content_type):
    """
    We consider a source content-type "used" if there exist django-guardian
    per-object permissions using that content type.

    One other potential use of the content type is in admin-site edit
    histories, but it should be very rare to edit sources through the admin
    site, so we almost certainly don't have to worry about it happening in the
    middle of this set of migrations.
    """
    UserObjectPermission = apps.get_model('guardian', 'UserObjectPermission')
    GroupObjectPermission = apps.get_model('guardian', 'GroupObjectPermission')
    return (
        UserObjectPermission.objects.filter(
            permission__content_type=content_type).exists()
        or
        GroupObjectPermission.objects.filter(
            permission__content_type=content_type).exists()
    )


def content_type_to_sources(apps, schema_editor):
    """
    Since Django will auto-generate ContentTypes when it can, we need
    to cover the cases when the images.source CT, the sources.source CT, both,
    or neither are already generated. Also, depending on when each was created,
    either CT may be in use or not.
    """
    ContentType = apps.get_model('contenttypes', 'ContentType')

    try:
        images_source_ct = ContentType.objects.get(
            app_label='images', model='source')
    except ContentType.DoesNotExist:
        # Nothing has called for this ContentType's creation yet.
        return

    try:
        sources_source_ct = ContentType.objects.get(
            app_label='sources', model='source')
    except ContentType.DoesNotExist:
        # Nothing has called for this ContentType's creation yet.
        # So we'll have no problems changing images.source to be
        # sources.source.
        images_source_ct.app_label = 'sources'
        images_source_ct.save()
        return

    # Both images.source and sources.source ContentTypes exist.
    if content_type_is_used(apps, images_source_ct):
        if content_type_is_used(apps, sources_source_ct):
            # Both ContentTypes are being used, so it's not safe to just delete
            # one of them.
            # If absolutely needed, we could code some functionality here to
            # port the images.source Permissions to sources.source Permissions,
            # but hopefully this case just never happens and we don't have to
            # worry about it...
            raise RuntimeError(
                "Both images.source and sources.source ContentTypes"
                " are in use.")
        else:
            # Just images.source is in use, so delete sources.source, then
            # change images.source to sources.source.
            sources_source_ct.delete()
            images_source_ct.app_label = 'sources'
            images_source_ct.save()
    else:
        # images.source is not in use, so delete it, thereby just leaving
        # sources.source.
        images_source_ct.delete()


def content_type_to_images(apps, schema_editor):
    ContentType = apps.get_model('contenttypes', 'ContentType')

    # Hopefully, the more involved logic of the forwards operation
    # guarantees that the backwards operation never has to worry about
    # the images.source ContentType already existing. Thus, backwards is
    # simpler.
    try:
        content_type = ContentType.objects.get(
            app_label='sources', model='source')
    except ContentType.DoesNotExist:
        pass
    else:
        content_type.app_label = 'images'
        content_type.save()


class Migration(migrations.Migration):
    """
    Part of moving the Source model from images to sources.
    See sources/migrations/0002_create_source.py for an explanation.
    """

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),

        ('annotations', '0025_source_fk_restore_constraint'),
        ('calcification', '0004_source_fk_restore_constraint'),
        ('images', '0039_source_fk_restore_constraint'),
        ('jobs', '0017_source_fk_restore_constraint'),
        ('sources', '0004_source_fk_restore_constraint'),
        ('vision_backend', '0023_source_fk_restore_constraint'),
    ]

    operations = [
        migrations.RunPython(content_type_to_sources, content_type_to_images),
    ]
