# Generated by Django 4.1.10 on 2023-11-19 23:57

from django.db import migrations


def port_status_values(apps, port_spec):
    Job = apps.get_model('jobs', 'Job')

    for job in Job.objects.filter(status__in=list(port_spec.keys())):
        # Use update() so we can set the modify date to the existing value
        # rather than having it auto-set to the current date.
        Job.objects.filter(pk=job.pk).update(
            status=port_spec[job.status], modify_date=job.modify_date)


def port_status_values_forwards(apps, schema_editor):
    port_status_values(apps, dict(
        IP='in_progress',
        PN='pending',
        SC='success',
        FL='failure',
    ))


def port_status_values_backwards(apps, schema_editor):
    port_status_values(apps, dict(
        in_progress='IP',
        pending='PN',
        success='SC',
        failure='FL',
    ))


class Migration(migrations.Migration):
    """
    This migration is almost a carbon copy of jobs 0009, except that:
    - This one ensures that api_core 0004 runs first.
    - This one ignores newly-created Jobs that already have the new statuses.

    jobs 0009 had implicitly assumed, but failed to specify, that api_core 0004
    was supposed to run first. The result is that jobs 0009 could have run
    first, and then api_core 0004, thus creating ApiJobUnit-based Jobs which
    ended up with the old status values 'SC', 'FL', etc.
    """

    dependencies = [
        ('api_core', '0004_port_unit_data_to_internal_jobs'),
        ('jobs', '0011_alter_job_result_message'),
    ]

    operations = [
        migrations.RunPython(
            port_status_values_forwards, port_status_values_backwards),
    ]
