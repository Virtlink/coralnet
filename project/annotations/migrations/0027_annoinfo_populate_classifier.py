# Generated by Django 4.2.16 on 2024-10-19 07:31

from django.conf import settings
from django.db import migrations
from tqdm import tqdm


def populate(apps, schema_editor):
    Classifier = apps.get_model('vision_backend', 'Classifier')
    Event = apps.get_model('events', 'Event')
    Image = apps.get_model('images', 'Image')
    Score = apps.get_model('vision_backend', 'Score')

    latest_event_per_image = (
        Event.objects
        .filter(type='classify_image')
        # only() limits fetching to only the specified fields.
        .only('image_id', 'classifier_id')
        # Increasing image ids instead of decreasing, so that the images
        # handled earliest - i.e. the images with the biggest desync due to
        # this migration's long transaction - are hopefully not the most
        # active images (when running this migration with the web server up).
        .order_by('image_id', '-pk')
        .distinct('image_id')
        # iterator() should avoid attempting to cache the whole result set,
        # which would run us out of memory with production-numbers of images.
        .iterator(chunk_size=10000)
    )

    for event in tqdm(latest_event_per_image, disable=settings.TQDM_DISABLE):
        if not Score.objects.filter(image_id=event.image_id).exists():
            # Was previously classified, but scores were deleted, so it's
            # meaningless to set a classifier value.
            # This also checks for the image being deleted or not.
            continue
        if not Classifier.objects.filter(pk=event.classifier_id).exists():
            # Latest-event classifier was deleted. Likely needs reclassifying,
            # so leave as null.
            continue

        image = Image.objects.only('pk', 'annoinfo').get(pk=event.image_id)
        if image.annoinfo.classifier:
            # Already filled in by a classification that happened before or
            # during this migration.
            continue

        image.annoinfo.classifier_id = event.classifier_id
        image.annoinfo.save()


class Migration(migrations.Migration):
    """
    Populate the ImageAnnotationInfo classifier field to a reasonable
    extent.
    We'll use the ClassifyImageEvents introduced in CoralNet 1.7. Any
    images classified before then will not get the field populated
    in this migration.
    """

    dependencies = [
        ('annotations', '0026_annoinfo_add_classifier'),
        ('events', '0004_indexes_for_type_source_image'),
        ('images', '0040_delete_source'),
        ('vision_backend', '0027_sourcecheckrequestevent'),
    ]

    operations = [
        migrations.RunPython(populate, migrations.RunPython.noop),
    ]
